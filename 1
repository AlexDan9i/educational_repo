# Конфигурация
$OUToMonitor = "OU=Computers,DC=contoso,DC=com"  # Замените на вашу OU
$GroupsToCheck = @("GRP-Workstations", "GRP-SupportTools") # Группы, в которые должен входить компьютер
$LogFile = "C:\Scripts\OUWatcher.log"
$SmtpServer = "smtp.contoso.com"
$EmailFrom = "ad-watcher@contoso.com"
$EmailTo = "admin@contoso.com"

# Логирование
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"
    Add-Content -Path $LogFile -Value $logMessage
    Write-Output $logMessage
}

# Отправка email
function Send-Notification {
    param (
        [string]$Subject,
        [string]$Body
    )
    try {
        Send-MailMessage -From $EmailFrom -To $EmailTo -Subject $Subject -Body $Body -SmtpServer $SmtpServer
    } catch {
        Write-Log "Ошибка при отправке email: $_" "ERROR"
    }
}

# Проверка и добавление в группы
function Process-NewComputer {
    param (
        [string]$ComputerDN
    )
    try {
        $computer = Get-ADComputer -Identity $ComputerDN
        Write-Log "Найден новый компьютер: $($computer.Name)"

        foreach ($group in $GroupsToCheck) {
            $isMember = Get-ADGroupMember -Identity $group -Recursive | Where-Object { $_.DistinguishedName -eq $computer.DistinguishedName }
            if (-not $isMember) {
                try {
                    Add-ADGroupMember -Identity $group -Members $computer
                    $msg = "Компьютер $($computer.Name) добавлен в группу $group."
                    Write-Log $msg
                    Send-Notification -Subject "Добавлен в группу: $($computer.Name)" -Body $msg
                } catch {
                    $errMsg = "Ошибка при добавлении $($computer.Name) в $group: $_"
                    Write-Log $errMsg "ERROR"
                    Send-Notification -Subject "Ошибка добавления в группу" -Body $errMsg
                }
            } else {
                Write-Log "Компьютер $($computer.Name) уже является членом $group."
            }
        }
    } catch {
        Write-Log "Ошибка при обработке компьютера $ComputerDN: $_" "ERROR"
        Send-Notification -Subject "Ошибка обработки нового компьютера" -Body "Ошибка при обработке: $_"
    }
}

# Основной цикл: проверка новых объектов в OU (один раз, можно положить в планировщик или цикл)
function Watch-OU {
    Write-Log "Запуск сканирования OU: $OUToMonitor"
    $computers = Get-ADComputer -Filter * -SearchBase $OUToMonitor

    foreach ($computer in $computers) {
        # Здесь можно проверять время создания, чтобы отфильтровать старые
        $created = ($computer.whenCreated)
        if ($created -gt (Get-Date).AddMinutes(-5)) {
            Process-NewComputer -ComputerDN $computer.DistinguishedName
        }
    }
}

# Запуск
Watch-OU

По расписанию (Task Scheduler) — запускать каждые 5 минут.
Фоновый процесс с циклом:
powershell
Копировать
Редактировать
while ($true) {
    Watch-OU
    Start-Sleep -Seconds 300
}


function Process-NewComputer {
    param (
        [string]$ComputerDN
    )
    try {
        $computer = Get-ADComputer -Identity $ComputerDN
        Write-Log "Найден новый компьютер: $($computer.Name)"

        $memberOfGroups = Get-ADPrincipalGroupMembership -Identity $computer | Select-Object -ExpandProperty Name

        foreach ($group in $GroupsToCheck) {
            if ($memberOfGroups -notcontains $group) {
                try {
                    Add-ADGroupMember -Identity $group -Members $computer
                    $msg = "Компьютер $($computer.Name) добавлен в группу $group."
                    Write-Log $msg
                    Send-Notification -Subject "Добавлен в группу: $($computer.Name)" -Body $msg
                } catch {
                    $errMsg = "Ошибка при добавлении $($computer.Name) в $group: $_"
                    Write-Log $errMsg "ERROR"
                    Send-Notification -Subject "Ошибка добавления в группу" -Body $errMsg
                }
            } else {
                Write-Log "Компьютер $($computer.Name) уже состоит в группе $group."
            }
        }
    } catch {
        Write-Log "Ошибка при обработке компьютера $ComputerDN: $_" "ERROR"
        Send-Notification -Subject "Ошибка обработки нового компьютера" -Body "Ошибка при обработке: $_"
    }
}
